package smart.ai.admin.service.common;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.MediaType;
import org.springframework.http.codec.ServerSentEvent;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import smart.ai.admin.service.admin.AdminService;

// TODO: V2 개발 완료 후 기존 외부 명령 서비스 복원 필요
// 기존 외부 명령 서비스 - V2 개발 중 임시 주석 처리
/*
@Service
public class CommandService {
    private static final Logger log = LoggerFactory.getLogger(AdminService.class);

    @Autowired
    Map<String, WebClient> webClients;
*/

    public Mono<String> executeCommand(String hostName, String command) {
        WebClient worker = webClients.get(hostName);
        return worker.post()
                .uri(builder -> builder.path("/api/command/execute").queryParam("command", command).build())
                .retrieve()
                .bodyToMono(String.class)
                .doOnError(e -> log.error(hostName + " - " + command + ": " + e.toString()))
                .doOnCancel(() -> log.info(hostName + " - " + command + ": canceled"));
    }

    public Flux<ServerSentEvent<String>> streamCommand(String hostName, String command) {
        WebClient worker = webClients.get(hostName);
        return worker.post()
                .uri(builder -> builder.path("/api/command/stream").queryParam("command", command).build())
                .accept(MediaType.TEXT_EVENT_STREAM)
                .retrieve()
                .bodyToFlux(new ParameterizedTypeReference<ServerSentEvent<String>>() {})
                .doOnError(e -> log.error(hostName + " - " + command + ": " + e.toString()))
                .doOnCancel(() -> log.info(hostName + " - " + command + ": canceled"));
    }
}
*/